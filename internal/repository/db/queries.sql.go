// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: queries.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one

INSERT INTO tblusers (
    "idRol", "NameUser", "Email", "LastName", "Password", "LastActivitie", "DateCreated"
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
)
RETURNING "idUser", "idRol", "NameUser", "Email", "LastName", "DateCreated", "LastActivitie", "Password"
`

type CreateUserParams struct {
	IdRol         int16       `json:"idRol"`
	NameUser      string      `json:"NameUser"`
	Email         string      `json:"Email"`
	LastName      string      `json:"LastName"`
	Password      string      `json:"Password"`
	LastActivitie pgtype.Date `json:"LastActivitie"`
	DateCreated   pgtype.Date `json:"DateCreated"`
}

// internal/repository/queries.sql
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (Tbluser, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.IdRol,
		arg.NameUser,
		arg.Email,
		arg.LastName,
		arg.Password,
		arg.LastActivitie,
		arg.DateCreated,
	)
	var i Tbluser
	err := row.Scan(
		&i.IdUser,
		&i.IdRol,
		&i.NameUser,
		&i.Email,
		&i.LastName,
		&i.DateCreated,
		&i.LastActivitie,
		&i.Password,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM tblusers
WHERE "idUser" = $1
`

func (q *Queries) DeleteUser(ctx context.Context, iduser int32) error {
	_, err := q.db.Exec(ctx, deleteUser, iduser)
	return err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT "idUser", "idRol", "NameUser", "Email", "LastName", "DateCreated", "LastActivitie", "Password" FROM tblusers
ORDER BY "idUser"
LIMIT $1
OFFSET $2
`

type GetAllUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllUsers(ctx context.Context, arg GetAllUsersParams) ([]Tbluser, error) {
	rows, err := q.db.Query(ctx, getAllUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tbluser
	for rows.Next() {
		var i Tbluser
		if err := rows.Scan(
			&i.IdUser,
			&i.IdRol,
			&i.NameUser,
			&i.Email,
			&i.LastName,
			&i.DateCreated,
			&i.LastActivitie,
			&i.Password,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT "idUser", "idRol", "NameUser", "Email", "LastName", "DateCreated", "LastActivitie", "Password" FROM tblusers
WHERE "Email" = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (Tbluser, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i Tbluser
	err := row.Scan(
		&i.IdUser,
		&i.IdRol,
		&i.NameUser,
		&i.Email,
		&i.LastName,
		&i.DateCreated,
		&i.LastActivitie,
		&i.Password,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT "idUser", "idRol", "NameUser", "Email", "LastName", "DateCreated", "LastActivitie", "Password" FROM tblusers
WHERE "idUser" = $1 LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, iduser int32) (Tbluser, error) {
	row := q.db.QueryRow(ctx, getUserByID, iduser)
	var i Tbluser
	err := row.Scan(
		&i.IdUser,
		&i.IdRol,
		&i.NameUser,
		&i.Email,
		&i.LastName,
		&i.DateCreated,
		&i.LastActivitie,
		&i.Password,
	)
	return i, err
}

const getUsersWithFilters = `-- name: GetUsersWithFilters :many
SELECT "idUser", "idRol", "NameUser", "Email", "LastName", "DateCreated", "LastActivitie", "Password" FROM tblusers
WHERE
    ($3::VARCHAR IS NULL OR "NameUser" ILIKE $3)
AND
    ($4::VARCHAR IS NULL OR "Email" ILIKE $4)
ORDER BY "idUser"
LIMIT $1
OFFSET $2
`

type GetUsersWithFiltersParams struct {
	Limit       int32       `json:"limit"`
	Offset      int32       `json:"offset"`
	NameFilter  pgtype.Text `json:"name_filter"`
	EmailFilter pgtype.Text `json:"email_filter"`
}

func (q *Queries) GetUsersWithFilters(ctx context.Context, arg GetUsersWithFiltersParams) ([]Tbluser, error) {
	rows, err := q.db.Query(ctx, getUsersWithFilters,
		arg.Limit,
		arg.Offset,
		arg.NameFilter,
		arg.EmailFilter,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tbluser
	for rows.Next() {
		var i Tbluser
		if err := rows.Scan(
			&i.IdUser,
			&i.IdRol,
			&i.NameUser,
			&i.Email,
			&i.LastName,
			&i.DateCreated,
			&i.LastActivitie,
			&i.Password,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
